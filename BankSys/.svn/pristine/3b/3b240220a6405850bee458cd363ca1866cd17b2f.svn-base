<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.teamone.dao.UserMapper" >
  <resultMap id="BaseResultMap" type="com.teamone.entity.User" >
    <id column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="user_name" property="userName" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <collection property="roleList" resultMap="RoleResultMap"/>
  </resultMap>
  <resultMap id="RoleResultMap" type="com.teamone.entity.Role" >
    <id column="role_id" property="roleId" jdbcType="BIGINT" />
    <result column="role_name" property="roleName" jdbcType="VARCHAR" />
    <result column="description" property="description" jdbcType="VARCHAR" />
    <collection property="permissionList" resultMap="PermissionResultMap"/>
  </resultMap>
  <resultMap id="PermissionResultMap" type="com.teamone.entity.Permission" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="permission" property="permission" jdbcType="VARCHAR" />
    <result column="detail" property="detail" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    user_id, user_name, password, status
  </sql>
  
  <!-- 关联的 permission以及 role -->
  <sql id="Permission_Column_List" >
    id, permission, detail
  </sql>
  <sql id="Role_Column_List" >
    r.role_id, role_name, description
  </sql>
  
  <select id="getAllUsers" resultMap="BaseResultMap" >
    SELECT
    u.user_id, user_name, password, status,<include refid="Role_Column_List" />,
    <include refid="Permission_Column_List" />
    FROM user u
    LEFT JOIN user_role ur ON  ur.user_id = u.user_id
    LEFT JOIN role r ON ur.role_id=r.role_id
    LEFT JOIN role_permission rp ON rp.role_id=r.role_id
    LEFT JOIN permission p ON p.id = rp.permission_id
  </select>
  
  
  
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from user
    where user_id = #{userId,jdbcType=INTEGER}
  </select>
<!--   <select id="selectByuserName"  resultMap="BaseResultMap" parameterType="com.teamone.entity.User">
  SELECT * from user WHERE user_name=#{userName}
  </select> -->
  <select id="selectByuserName"  resultMap="BaseResultMap" >
 SELECT
    u.user_id, user_name, password, status,<include refid="Role_Column_List" />,
    <include refid="Permission_Column_List" />
    FROM user u
    LEFT JOIN user_role ur ON  ur.user_id = u.user_id
    LEFT JOIN role r ON ur.role_id=r.role_id
    LEFT JOIN role_permission rp ON rp.role_id=r.role_id
    LEFT JOIN permission p ON p.id = rp.permission_id
    WHERE user_name = #{userName}
  </select>
  
    <select id="searchAllUser" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user
  </select>
  <!-- 删除用户角色关联 -->
  <delete id="deleteUserRoles" parameterType="java.lang.Integer" >
    delete from user_role
    where user_id = #{userId,jdbcType=BIGINT}
  </delete>
  <!-- 建立用户角色关联 -->
  <insert id="createUserRole">
    INSERT INTO user_role VALUES (user_id=#{userId},role_id=#{roleId})
  </insert>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from user
    where user_id = #{userId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.teamone.entity.User" >
    <selectKey resultType="java.lang.Integer" order="AFTER" keyProperty="userId">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into user (user_id, user_name, password,
    status)
    values (#{userId,jdbcType=INTEGER}, #{userName,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
    #{status,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.teamone.entity.User" >
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        user_id,
      </if>
      <if test="userName != null" >
        user_name,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="status != null" >
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="userName != null" >
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.teamone.entity.User" >
    update user
    <set >
      <if test="userName != null" >
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
    </set>
    where user_id = #{userId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.teamone.entity.User" >
    update user
    set user_name = #{userName,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER}
    where user_id = #{userId,jdbcType=INTEGER}
  </update>
   <update id="updateStatus" parameterType="java.lang.Integer" >
    update user set
       status = 0
       where user_id = #{userId,jdbcType=INTEGER}
  </update>
  
  <update id="unFreeze" parameterType="java.lang.Integer" >
    update user set
       status = 1
       where user_id = #{userId,jdbcType=INTEGER}
  </update>
</mapper>